<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;
// use Nwidart\Modules\Facades\Module;
use Illuminate\Support\Str;

class ObserveAllCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'observe:all {--with_models=no} {--class_name=CallObserverAction} {--namespace=App\Actions}';
    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'This command will observe all models to  ModelObserver for an HMVC structure';

    /**
     * Execute the console command.
     *
     * @return int
     */
    public function handle()
    {

        // get params from command 
        $class_name = ucfirst($this->option('class_name'));
        $namespace =  str_replace('/', '\\', $this->option('namespace'));
        $with_models = $this->option('with_models');

        // create folder by namespace 
        if (!File::isDirectory($namespace)) {
            File::makeDirectory($namespace, 0755, true);
        }

        // create php file by namespace and class name 
        $callObserverActionPath = base_path("${namespace}\\${class_name}.php");
        if (!File::exists($callObserverActionPath)) {
            $this->info("File ${class_name} created successfully ✅");
            File::put($callObserverActionPath, "");
        }

        // count lines of files before regenerate file 
        $old_line_count = count(file($callObserverActionPath));

        //get all models and add observer to them
        // $observedEntities = $this->getObservedEntities();


        if ($with_models === "yes") {
            // $observedModels = $this->getObservedModels();
        } else {
            $observedModels = ["        // base model folder ", "        //to observe models in app/Models run php artisan observe:all --with_models=yes"];
            $this->comment("if you want to observe models in app/Models add option  --with_models=yes");
        }

        // $content = array_merge($observedModels, $observedEntities);
        $content = ($observedModels);
        $observer_class = "\App\Observers\ModelObserver::class";
        $fileContent = $this->generateFileTemplate($class_name, $namespace, $observer_class, $content);

        File::put($callObserverActionPath, $fileContent);

        // $entities_count = count($observedEntities) - count(Module::all()); // -count(Module::all()  to remove comments of sections name
        $models_count = count($observedModels) - 1; // -1 to remove comment of section name
        // $this->info("${entities_count} entities observed successfully ✅");
        $this->info("${models_count} models observed successfully ✅");

        // count lines of files after regenerate file 
        $new_line_count = count(file($callObserverActionPath));

        $sub = $new_line_count - $old_line_count;

        if ($sub > 0) {
            $this->info(abs($sub) . " lines added ✅");
        } elseif ($sub < 0) {
            $this->info(abs($sub) . " lines removed ✅");
        }
        $this->info($callObserverActionPath);
    }
    private function generateFileTemplate(string $class_name, string  $namespace, string $observer_class, array $observed_entities,)
    {
        return
            "<?php 

namespace ${namespace};
    
/**
 * This file was auto-generated by the ObserveAllCommand.
 * Please refrain from direct edits to this file.
 * Regenerate it using the following commands:
 * - php artisan observe:all --with_models=no (To observe models in Modules folder)
 * - php artisan observe:all --with_models=yes (To observe all models in Modules folder and regular models)
 * 
 * GitHub Account: https://github.com/Amgad226
 */

class ${class_name} 
{                 
    public static function execute() 
    {
" .
            "        \$observer_class = {$observer_class};\n"
            . implode("\n", $observed_entities) . " 
    }
}";
    }
    // private function getObservedEntities(): array
    // {
    //     $observedEntities = [];
    //     foreach (Module::all() as $module) {
    //         $observedEntities[] = "        // ${module} ";
    //         $path = base_path("Modules/{$module}/Entities/*.php");

    //         collect(glob($path))->each(function ($file) use ($module, &$observedEntities) {
    //             $observe_entity = "        \\Modules\\{$module}\\Entities\\" . pathinfo($file, PATHINFO_FILENAME) . "::observe(\$observer_class);";
    //             $observedEntities[] = $observe_entity;
    //         });
    //     }

    //     return $observedEntities;
    // }

    private function getObservedModels(): array
    {
        $except_models = [
            "Log",
            "ActivityLog"
        ];
        $observedModels = [];

        $observedModels[] = "        // base model folder ";

        $path = base_path("App/Models/*.php");
        collect(glob($path))->each(function ($file) use (&$observedModels, $except_models) {

            $model_name =  pathinfo($file, PATHINFO_FILENAME);
            if (in_array($model_name, $except_models)) {
                $observe_model = "        //\\App\\Models\\" . pathinfo($file, PATHINFO_FILENAME) . "::observe(\$observer_class); //commented to ignore infinity loop  ";
            } else {

                $observe_model = "        \\App\\Models\\" . pathinfo($file, PATHINFO_FILENAME) . "::observe(\$observer_class); ";
            }
            $observedModels[] = $observe_model;
        });


        return $observedModels;
    }
}
